plugins {
    id 'java'
    id 'io.quarkus'
    id 'com.google.cloud.tools.jib' version '3.4.4'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'checkstyle'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkiverse.mybatis:quarkus-mybatis:2.4.1'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-flyway'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group = 'app.aoki'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

// Jib configuration for containerization
jib {
    // Check if this is a native build
    def isNativeBuild = project.hasProperty('nativeBuild')
    
    // Default base images
    def normalBaseImage = System.getProperty('jib.from.image') ?: 'gcr.io/distroless/java21-debian12'
    def debugBaseImage = 'debian:bookworm-slim'
    
    from {
        image = normalBaseImage
    }
    
    to {
        image = System.getProperty('jib.to.image') ?: "ghcr.io/yuki-js/quarkus-crud:${version}"
        auth {
            username = System.getProperty('jib.to.auth.username') ?: System.getenv('REGISTRY_USERNAME') ?: ''
            password = System.getProperty('jib.to.auth.password') ?: System.getenv('REGISTRY_PASSWORD') ?: ''
        }
    }
    
    container {
        if (isNativeBuild) {
            // Native executable configuration
            entrypoint = ['/quarkus-run']
            workingDirectory = '/'
            ports = ['8080']
            
            // Labels for native image
            labels = [
                'org.opencontainers.image.title': 'quarkus-crud-native',
                'org.opencontainers.image.description': 'Quarkus CRUD application (native)',
                'org.opencontainers.image.version': "${version}",
                'org.opencontainers.image.source': 'https://github.com/yuki-js/quarkus-crud'
            ]
        } else {
            // JVM configuration
            jvmFlags = [
                '-Djava.util.logging.manager=org.jboss.logmanager.LogManager',
                '-Dquarkus.http.host=0.0.0.0',
                '-Dquarkus.http.port=8080'
            ]
            mainClass = 'io.quarkus.bootstrap.runner.QuarkusEntryPoint'
            ports = ['8080']
            
            // Labels for JVM image
            labels = [
                'org.opencontainers.image.title': 'quarkus-crud-jvm',
                'org.opencontainers.image.description': 'Quarkus CRUD application (JVM)',
                'org.opencontainers.image.version': "${version}",
                'org.opencontainers.image.source': 'https://github.com/yuki-js/quarkus-crud'
            ]
        }
        
        // Common settings
        creationTime = 'USE_CURRENT_TIMESTAMP'
        format = 'Docker'
    }
    
    // For JVM builds, copy the quarkus-app directory
    if (!isNativeBuild) {
        extraDirectories {
            paths {
                path {
                    from = file('build/quarkus-app')
                    into = '/app'
                }
            }
            permissions = [
                '/app/quarkus-run.jar': '755'
            ]
        }
        
        container {
            appRoot = '/app'
            entrypoint = ['java']
            args = [
                '-Djava.util.logging.manager=org.jboss.logmanager.LogManager',
                '-jar',
                '/app/quarkus-run.jar'
            ]
        }
    } else {
        // For native builds, copy the native executable
        extraDirectories {
            paths {
                path {
                    from = file('build/jib-native')
                    into = '/'
                }
            }
            permissions = [
                '/quarkus-run': '755'
            ]
        }
    }
}

// Spotless configuration for code formatting
spotless {
    java {
        // Use Google Java Format for formatting
        googleJavaFormat('1.19.2')
        
        // Apply formatting to all Java source files
        target 'src/**/*.java'
        
        // Add license header (optional - remove if not needed)
        // licenseHeader '/* Copyright (c) 2024 */'
        
        // Format imports
        importOrder()
        removeUnusedImports()
        
        // Trim trailing whitespace
        trimTrailingWhitespace()
        
        // Ensure files end with a newline
        endWithNewline()
    }
}

// Checkstyle configuration for code quality checks (linting)
checkstyle {
    toolVersion = '10.12.5'
    configFile = file('config/checkstyle/checkstyle.xml')
    // Don't fail build on violations initially (show warnings only)
    ignoreFailures = true
    showViolations = true
}

// Configure checkstyle tasks to work independently
tasks.withType(Checkstyle) {
    // Remove dependency on compilation
    classpath = files()
    
    // Generate HTML reports
    reports {
        html.required = true
        xml.required = false
    }
}
