## A basic GitHub Actions workflow for your Quarkus application.

name: CI build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quarkus_crud
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Check code formatting
        run: ./gradlew spotlessCheck

      - name: Check code quality (linting)
        run: ./gradlew checkstyleMain checkstyleTest

      - name: Build and Test
        run: ./gradlew build

      - name: Generate Test Evidence Summary
        if: always()
        run: |
          echo "# 🧪 Test Execution Evidence" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Results Summary
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "build/test-results/test" ]; then
            TOTAL_TESTS=$(find build/test-results/test -name "*.xml" -exec grep -o 'tests="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}')
            TOTAL_FAILURES=$(find build/test-results/test -name "*.xml" -exec grep -o 'failures="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}')
            TOTAL_ERRORS=$(find build/test-results/test -name "*.xml" -exec grep -o 'errors="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}')
            TOTAL_SKIPPED=$(find build/test-results/test -name "*.xml" -exec grep -o 'skipped="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}')
            
            echo "| Metric | Count | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | $TOTAL_TESTS | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "| Failures | $TOTAL_FAILURES | $([ $TOTAL_FAILURES -eq 0 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
            echo "| Errors | $TOTAL_ERRORS | $([ $TOTAL_ERRORS -eq 0 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
            echo "| Skipped | $TOTAL_SKIPPED | ℹ️ |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Test Suites Breakdown
            echo "## 📝 Test Suites" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Test Suite | Tests | Failures | Errors | Time |" >> $GITHUB_STEP_SUMMARY
            echo "|------------|-------|----------|--------|------|" >> $GITHUB_STEP_SUMMARY
            
            for file in build/test-results/test/*.xml; do
              if [ -f "$file" ]; then
                SUITE_NAME=$(grep -o 'name="[^"]*"' "$file" | head -1 | sed 's/name="//;s/"//' | sed 's/app\.aoki\.//')
                SUITE_TESTS=$(grep -o 'tests="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
                SUITE_FAILURES=$(grep -o 'failures="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
                SUITE_ERRORS=$(grep -o 'errors="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
                SUITE_TIME=$(grep -o 'time="[0-9.]*"' "$file" | head -1 | grep -o '[0-9.]*')
                STATUS=$([ $SUITE_FAILURES -eq 0 ] && [ $SUITE_ERRORS -eq 0 ] && echo '✅' || echo '❌')
                echo "| $SUITE_NAME | $SUITE_TESTS | $SUITE_FAILURES | $SUITE_ERRORS | ${SUITE_TIME}s | $STATUS |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Database Evidence
          echo "## 🗄️ Database Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Verifying data persistence in PostgreSQL..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check tables exist
          TABLES=$(PGPASSWORD=postgres psql -h localhost -U postgres -d quarkus_crud -t -c "\dt" 2>/dev/null | grep -E "users|rooms|flyway" | wc -l || echo "0")
          
          if [ "$TABLES" -ge 3 ]; then
            echo "✅ Database tables created successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Count records
            USER_COUNT=$(PGPASSWORD=postgres psql -h localhost -U postgres -d quarkus_crud -t -c "SELECT COUNT(*) FROM users;" 2>/dev/null | xargs || echo "0")
            ROOM_COUNT=$(PGPASSWORD=postgres psql -h localhost -U postgres -d quarkus_crud -t -c "SELECT COUNT(*) FROM rooms;" 2>/dev/null | xargs || echo "0")
            
            echo "| Entity | Count | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Users | $USER_COUNT | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "| Rooms | $ROOM_COUNT | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show sample data
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>📋 Sample Data (click to expand)</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`sql" >> $GITHUB_STEP_SUMMARY
            echo "-- Recent Users" >> $GITHUB_STEP_SUMMARY
            PGPASSWORD=postgres psql -h localhost -U postgres -d quarkus_crud -c "SELECT id, created_at FROM users ORDER BY id DESC LIMIT 5;" 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Error querying users" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "-- Recent Rooms" >> $GITHUB_STEP_SUMMARY
            PGPASSWORD=postgres psql -h localhost -U postgres -d quarkus_crud -c "SELECT id, name, user_id FROM rooms ORDER BY id DESC LIMIT 5;" 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Error querying rooms" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Database tables not found or not accessible" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage Summary
          echo "## 🎯 Test Coverage Areas" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Authentication (guest user creation, token validation)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CRUD Operations (create, read, update, delete)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Authorization (access control, multi-user scenarios)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Data Integrity (special chars, unicode, nulls, edge cases)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Database Integration (PostgreSQL + Flyway + MyBatis)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ REST API Endpoints (all resources)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Status
          if [ "$TOTAL_FAILURES" -eq 0 ] && [ "$TOTAL_ERRORS" -eq 0 ]; then
            echo "## ✅ Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All $TOTAL_TESTS tests passed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Build Status: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi
