name: Build and Publish with Jib

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NORMAL_BASE_IMAGE: gcr.io/distroless/java21-debian12
  DEBUG_BASE_IMAGE: eclipse-temurin:21-jre

jobs:
  prepare:
    name: Prepare build information
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.sha.outputs.short_sha }}
      image_base: ${{ steps.image.outputs.image_base }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate short SHA
        id: sha
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "Short SHA: ${SHORT_SHA}"

      - name: Prepare image name
        id: image
        run: |
          IMAGE_BASE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "image_base=${IMAGE_BASE,,}" >> $GITHUB_OUTPUT
          echo "Image base: ${IMAGE_BASE,,}"

  build-and-push-jvm:
    name: Build and push JVM images
    runs-on: ubuntu-latest
    needs: prepare
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quarkus_crud
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build application
        run: ./gradlew build --no-daemon

      - name: Build and push JVM normal image
        env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew jib --no-daemon \
            -Djib.from.image=${{ env.NORMAL_BASE_IMAGE }} \
            -Djib.to.image=${{ needs.prepare.outputs.image_base }}:${{ needs.prepare.outputs.short_sha }}-jvm \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

      - name: Build and push JVM debug image
        env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew jib --no-daemon \
            -Djib.from.image=${{ env.DEBUG_BASE_IMAGE }} \
            -Djib.to.image=${{ needs.prepare.outputs.image_base }}:${{ needs.prepare.outputs.short_sha }}-jvm-debug \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

      - name: Tag as latest (on main branch)
        if: github.ref == 'refs/heads/main'
        env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew jib --no-daemon \
            -Djib.from.image=${{ env.NORMAL_BASE_IMAGE }} \
            -Djib.to.image=${{ needs.prepare.outputs.image_base }}:latest-jvm \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

      - name: Tag with semver (on tag)
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          ./gradlew jib --no-daemon \
            -Djib.from.image=${{ env.NORMAL_BASE_IMAGE }} \
            -Djib.to.image=${{ needs.prepare.outputs.image_base }}:${VERSION}-jvm \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

 
  verify-images:
    name: Verify built images
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push-jvm]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quarkus_crud
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Pull and verify JVM debug image
        run: |
          echo "Pulling JVM debug image..."
          docker pull ${{ needs.prepare.outputs.image_base }}:${{ needs.prepare.outputs.short_sha }}-jvm-debug
          echo "Verifying image exists..."
          docker images | grep quarkus-crud
          echo "Starting container..."
          docker run -d --name jvm-debug-test -p 8080:8080 \
            --add-host=host.docker.internal:host-gateway \
            -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://host.docker.internal:5432/quarkus_crud \
            ${{ needs.prepare.outputs.image_base }}:${{ needs.prepare.outputs.short_sha }}-jvm-debug
          echo "Waiting for application to start..."
          sleep 15
          echo "Checking container status..."
          docker ps -a
          docker logs jvm-debug-test
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/healthz || (echo "Health check failed!" && docker logs jvm-debug-test && exit 1)
          echo "Health check passed!"
          echo "Stopping container..."
          docker stop jvm-debug-test || true
          docker rm jvm-debug-test || true

      - name: Summary
        run: |
          echo "âœ… 1 image variants verified successfully!"
          echo "Images pulled and launched:"
          echo "  - ${{ needs.prepare.outputs.image_base }}:${{ needs.prepare.outputs.short_sha }}-jvm-debug"
