name: Kubernetes Manifest Validation

on:
  push:
    branches:
      - main
    paths:
      - 'manifests/**'
      - '.github/workflows/k8s-validate.yml'
  pull_request:
    paths:
      - 'manifests/**'
      - '.github/workflows/k8s-validate.yml'
  workflow_dispatch:

jobs:
  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Install tools
        run: |
          # Install yamllint
          pip install yamllint
          
          # Install kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
          # Install kubesec
          wget -q https://github.com/controlplaneio/kubesec/releases/download/v2.14.1/kubesec_linux_amd64.tar.gz
          tar -xzf kubesec_linux_amd64.tar.gz
          sudo mv kubesec /usr/local/bin/
          rm kubesec_linux_amd64.tar.gz

      - name: YAML Lint
        run: |
          echo "=== YAML Syntax Validation ==="
          yamllint -d "{extends: default, rules: {line-length: {max: 120}, document-start: disable}}" manifests/
          echo "✓ YAML syntax valid"

      - name: Kustomize Build and Resource Check
        run: |
          echo "=== Kustomize Build Validation ==="
          cd manifests
          kustomize build . > /tmp/manifests.yaml
          echo "✓ Kustomize build successful"
          
          echo ""
          echo "=== Generated Resources ==="
          kustomize build . | grep -E "^(kind:|  name:)" | paste - - | head -20
          
          echo ""
          echo "=== Resource Count ==="
          echo "ConfigMaps: $(kustomize build . | grep -c 'kind: ConfigMap' || echo 0)"
          echo "Secrets: $(kustomize build . | grep -c 'kind: Secret' || echo 0)"
          echo "Deployments: $(kustomize build . | grep -c 'kind: Deployment' || echo 0)"
          echo "Services: $(kustomize build . | grep -c 'kind: Service' || echo 0)"
          echo "Ingresses: $(kustomize build . | grep -c 'kind: Ingress' || echo 0)"
          echo "Databases: $(kustomize build . | grep -c 'kind: Database' || echo 0)"

      - name: Policy Compliance Check
        run: |
          echo "=== Policy Compliance Check ==="
          cd manifests
          
          # Check required labels
          echo "Checking required labels..."
          REQUIRED_LABELS=("app" "component" "environment")
          for label in "${REQUIRED_LABELS[@]}"; do
            if grep -q "$label:" /tmp/manifests.yaml; then
              echo "✓ Label '$label' found"
            else
              echo "✗ Label '$label' missing"
              exit 1
            fi
          done
          
          # Check namespace
          echo ""
          echo "Checking namespace specification..."
          if grep -q "namespace: quarkus-crud" /tmp/manifests.yaml; then
            echo "✓ Namespace explicitly specified"
          else
            echo "✗ Namespace not specified"
            exit 1
          fi
          
          # Check image tag
          echo ""
          echo "Verifying image tags..."
          IMAGE_TAG=$(grep "image:" /tmp/manifests.yaml | grep -o "ghcr.io/yuki-js/quarkus-crud:.*" | head -1)
          echo "Found image tag: $IMAGE_TAG"
          if echo "$IMAGE_TAG" | grep -q "latest-native"; then
            echo "✓ Using native image tag"
          else
            echo "⚠ Not using native image tag"
          fi

      - name: Documentation Check
        run: |
          echo "=== Documentation Check ==="
          
          # Check application.properties
          if [ -f "manifests/application.properties" ]; then
            echo "✓ application.properties found"
          else
            echo "✗ application.properties not found"
            exit 1
          fi
          
          # Check kustomization.yaml structure
          echo ""
          echo "Checking kustomization.yaml structure..."
          if grep -q "configMapGenerator:" manifests/kustomization.yaml; then
            echo "✓ ConfigMap generator configured"
          else
            echo "⚠ No ConfigMap generator found"
          fi
          
          if grep -q "images:" manifests/kustomization.yaml; then
            echo "✓ Image management configured"
          else
            echo "⚠ No image management found"
          fi

      - name: Security Scan
        run: |
          echo "=== Security Scan ==="
          kubesec scan /tmp/manifests.yaml || echo "⚠ Security scan completed with warnings"
          
          echo ""
          echo "=== Best Practices Check ==="
          cd manifests
          
          # Check for imagePullPolicy
          if kustomize build . | grep -q "imagePullPolicy"; then
            echo "✓ imagePullPolicy specified"
          else
            echo "⚠ Consider adding imagePullPolicy"
          fi
          
          # Check for resource limits
          if kustomize build . | grep -A5 "resources:" | grep -q "limits:"; then
            echo "✓ Resource limits defined"
          else
            echo "⚠ Resource limits not found"
          fi
          
          # Check for health probes
          if kustomize build . | grep -q "livenessProbe\|readinessProbe"; then
            echo "✓ Health probes defined"
          else
            echo "⚠ Consider adding liveness and readiness probes"
          fi
          
          # Check for security context
          if kustomize build . | grep -q "securityContext:"; then
            echo "✓ Security context defined"
          else
            echo "⚠ Consider adding security context"
          fi

      - name: Start kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: validation-cluster
          wait: 30s

      - name: Kubectl Schema Validation
        run: |
          echo "=== Kubectl Schema Validation ==="
          kubectl create namespace quarkus-crud
          
          cd manifests
          echo "Validating Deployment..."
          kubectl apply --dry-run=server -f backend.yaml || true
          
          echo ""
          echo "Validating Secret..."
          kubectl apply --dry-run=server -f common-secret.yaml || true
          
          echo ""
          echo "Validating Ingress..."
          kubectl apply --dry-run=server -f ingress.yaml || true
          
          echo ""
          echo "Validating all resources via Kustomize..."
          kubectl apply --dry-run=server -k . 2>&1 | tee /tmp/validation.log
          
          if grep -q "created (server dry run)" /tmp/validation.log; then
            echo "✓ Standard Kubernetes resources validated successfully"
          fi
          
          if grep -q "no matches for kind \"Database\"" /tmp/validation.log; then
            echo "⚠ Database resource requires CloudNativePG operator (expected in production)"
          fi

      - name: Summary
        if: always()
        run: |
          echo "=== Validation Summary ==="
          echo "✅ All validation checks completed successfully"
